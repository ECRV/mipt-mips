#summary SVN commands
#labels Phase-QA

= Introduction =

[http://en.wikipedia.org/wiki/Apache_Subversion Subversion (SVN)] is a popular [http://en.wikipedia.org/wiki/Version_control_system Version Control System (VCS)]. VCS is useful tool for teamwork: a lot of people can work in one project without disturbance of each other.

<br>
= How it works =
----

There is a special storage called "*repository*". It contains all enumerated versions (*revisions*) of projects, from first one to the latest. Allowed users can download any revision, usually latest, *head* version to their local machine — this operation is called *checkout* and the downloaded files are called *working copy*. After checkout, user may modify the working copy in any way — it will not change the version in the repository on a server. When user decides that his changes should be used by other team members, he performs *commit*. Commit is uploading of changes in the user's working copy to the repository. Every committed changes are received a unique revision number <font color=gray>(the number of the previous revision + 1)</font>. To download these changes other users should update their working copies using the *update* command.

<br>
= How to install =
----

== Tortoise SVN ==

[http://en.wikipedia.org/wiki/TortoiseSVN Tortoise SVN] is an extension for Windows Explorer that adds new items in context menu for easy performing SVN commands. It can be downloaded [http://tortoisesvn.net/ here].

Console version of SVN can be installed too. You may use it in Windows CMD terminal or in PowerShell.

== Linux ==

Package *subversion* should be available on any distribution of Linux. Use your package manager for installation. For example, in Ubuntu it is apt-get:
{{{
sudo apt-get install subversion
}}}

<br>
= Basic operations =
----

== Checkout (co) ==

=== Linux ===

Checkout is operation of initial download of sources from the repository. Syntax is following:
{{{
svn co <repository-url> [<local-folder>] [-r <revision number>] [--username <username>]
}}}
For example, to check out our project type in command line: 
{{{
svn checkout https://mipt-mips.googlecode.com/svn/trunk/ mipt-mips --username student@example.com
}}}
and you will get the latest revision of the repository (called _HEAD_) in `mipt-mips` folder. It will be your *working copy* of the repository.

=== Tortoise SVN ===

||<font color="red">*Note:*</font> even if you work with Tortois SVN read the _Linux_ chapter first.||

To checkout our repository using Tortoise SVN perform the following steps:
 * Right click on any blank space in the MS Explorer being in the folder where you want to have your working copy.
 * Click _SVN Checkout..._  -- *point 1* on the figure.
 * Enter the repository URL (in our case it is `https://mipt-mips.googlecode.com/svn/trunk/`) -- *point 2*.
 * Enter the path to the place where the working copy will be created and the name for it (in our case it is `mipt-mips`, but you can choose any other name) -- *point 3*.
 * On the picture we download _HEAD_ revision, but you can also select any revision number.<br /><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/checkout.png" width="650">

<br />
== Update (up) ==

=== Linux ===

Update is operation of downloading _changes_ of the repository to _previouisly checkouted_ working copy.
{{{
svn up [-r <revision number>]
}}}
If there is no -r flag, the working copy will be updated to the current HEAD revision. The number of the last downloaded revision is stored in local copy, and only *update* operation can change it. You can always look it using 'info' operation:
{{{
svn info
}}}

=== Tortoise SVN ===

||<font color="red">*Note:*</font> even if you work with Tortois SVN read the _Linux_ chapter first.||

 * Right click on folder with the working copy (or any other folders or files that you want to update) -- *point 1*.
 * Select _SVN Update_ -- *point 2*.<br /><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/update.png" width="750">
 * By default, local copy will be updated to the HEAD revision. If you want to update to other revision, select _Update to revision..._ in the _TortoiseSVN_ submenu.

<br />
== Diff ==

Diff operation shows changes that you have done comparing to the revision of your working copy.

=== Linux ===

Enter the following command line in the target repository:
{{{
svn diff
}}}
or
{{{
svn diff <your file or folder>
}}}
<br />
It is useful to redirect output somewhere else:
{{{
svn diff > my_changes.patch
}}}
or if you use [http://en.wikipedia.org/wiki/Vim_(text_editor) vim] editor:
{{{
svn diff | vim -
}}}

=== Tortoise SVN ===

Right click on files and folders that you want to compare then in select _TortoiseSVN_ -> _Diff_.

<br />
== Patch command ==

Svn diff allows you to make a solid file with only your changes (called *patch*). It is needed, because sometimes it can be useful not to commit your changes to the repository, but create a patch. For example, you can create a hotfix for the bug or want your colleague to review your changes before the commit.

=== Linux ===

To apply a patch to your working copy (i.e. make the changes that are contained in the patch), you may use `patch` command:
{{{
patch -p0 -i <your patch>
}}}

Note that patch command is independent from SVN (i.e. it is not an operation of svn tool).

=== Tortoise SVN ===

Patches can be generated and applied with _TortoiseSVN_ submenu commands _Create patch..._ and _Apply patch..._.

<br />
== Commit ==

Commit is operation of uploading your changes of the working copy to the repository. Usually commit is accompanied with a message that briefly describes the changes. Using these messages makes easy to understand what exactly has been changed.

In our project, there must be message in every commit and message should have one of the following prefixes:

|| `[trunk]`  || if you changed trunk ||
|| `[wiki]`   || if you changed wiki page ||
|| `[branch]` || if you changed branch ||
|| `[lectures]` || if you changed lectures (only for mentors!) ||

For example, `[trunk] added my name to the list of the project members`.

=== Linux ===

Type the following command staying in the folder that contains your changes:
{{{
svn commit -m <your message>
}}}

=== Tortoise SVN ===

To run commit in TortoiseSVN perform the following steps:

 * Right click your entire working (or any other folder and files that you want to commit) -- *point 1*.
 * Select _SVN Commit..._ -- *point 2*
 * Check that you commit to the right URL (to the main trunk, your branch, etc.) -- *point 3*.
 * Enter your commit message (don't forget about the prefix!) -- *point 4*<br /><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/commit.png" width="750">

<br />
== Add and Delete ==

Before committing newly created files to the repository, you should perform `svn add` operation. Otherwise, the svn will not pay any attention to them.

Inverse operation is called `svn delete`. Note, the if you delete the files in your working copy, but don't perform `svn delete`, your files will still exist in the repository, as svn don't know that you have deleted them.

=== Linux ===

Use the following command to add files or folders:
{{{
svn add <file1> <file2> <folder1> ...
}}}
For example:
{{{
svn add my_new_folder
}}}

Use the following command to delete files or folders:
{{{
svn delete <file1> <file2> <folder1>...
}}}

=== Tortoise SVN ===

See on pictures below how to perform this operations in Tortoise SVN.

To add files or folders:<br><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/add.png" width="650">

To delete files or folders:<br><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/delete.png" width="750">