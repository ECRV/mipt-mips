#summary SVN commands
#labels Phase-QA

= Introduction =

Subversion (SVN) is a popular Version Control System (VCS). VCS is useful tool for teamwork: a lot of people can work in one project without disturbance of each other.

= How it works =

There is a special storage called "*repository*". It contains all numerated versions (*revisions*) of projects, from first one to the latest. Allowed users can download any revision, usually latest, *head* version to their local machine — this operation is called *checkout*. After checkout, user may modify files on his local machine in any way — it will not change version in repository. When user decides that his changes should be used by anyone in team, he performs *commit*. Commit is addition of local changes to repository. Every commit increases number of revision.

= How to install =

== Tortoise SVN ==

Tortoise SVN is an extension for Windows Explorer that adds new items in context menu for easy performing SVN commands. It can be downloaded [http://tortoisesvn.net/ there].

Console version of SVN can be installed too. You may use it in Windows CMD terminal or in PowerShell.

== Linux ==

Package *subversion* should be available on any distribution of Linux. Use your package manager for installation. For example, in Ubuntu it is apt-get:

`sudo apt-get install subversion`

= Basic operations =

== Checkout (co) ==

Checkout is operation of initial download of sources from repository. Syntax is following:

`svn co <repository-url> [<local-folder>] [-r <revision number>] [--username <username>]`

For example, to check out our project type in command line: 

`svn checkout https://mipt-mips.googlecode.com/svn/trunk/ mipt-mips --username student@example.com`

and you will get HEAD revision in uarch-sim folder (*local copy*)

||In Tortoise SVN, make right click on any blank space in Explorer, click _SVN Checkout..._ and enter repository path and checkout path. You can also select revision number.<br /><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/checkout.png" width="650">||

== Update (up) ==

Update is operation of downloading _changes_ of repository version to _already checkouted_ local copy.

`svn up [-r <revision number>]`

If there is no -r flag, local copy will be updated to current HEAD revision. Number of last downloaded revision is stored in local copy, and only *update* operation can change it. You can always look it using 'info' operation:

`svn info`

||In Tortoise SVN, make right click on folder with local copy and select _SVN Update_.<br />By default, local copy will be updated to HEAD revision. If you want to update to other revision, select _Update to revision..._ in _TortoiseSVN_ submenu<br /><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/update.png" width="750">||

== Diff ==

Diff operation shows changes with last downoladed revision

`svn diff`

It is useful to redirect output somewhere else:

`svn diff > my_changes.patch`
`svn diff | vim -`

=== Patch command ===

svn diff allows you to make a solid file with only your changes (called *patch*). It is useful to send patches to your colleagues for review, as hotfix or for any other purpose. To apply a patch for your local copy, you may use 'patch' command with its tricky syntax:

`patch -p0 < my_changes.patch`

Note that patch command is independent from SVN.

||Patches can be generated and applied with _TortoiseSVN_ submenu commands _Create patch..._ and _Apply patch..._.<br />On picture below you can see example of patchfile opened in Tortoise Patch Viewer.<br /><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/patch.png" width="750">||

== Commit ==

Commit is operation of uploading changes of local copy to repository

`svn commit -m <message>`

=== Commit messages ===

Commit message is a brief description of changes. Using messages makes easy to understand, what commit _should have_ changed.

http://code.google.com/p/mipt-mips/source/list

In our project, there must be message in every commit and message should have one of following prefixes:

|| `[trunk]`  || if you changed trunk ||
|| `[wiki]`   || if you changed wiki page ||
|| `[branch]` || if you changed branch ||
|| `[lectures]` || if you changed lectures (only for mentors!) ||

||To run commit in TortoiseSVN, just make left click on you local copy and select _SVN Commit..._<br /> Subwindow on the bottom shows you files you're going to change in repository. Make double click on them to observe changes.<br />Top subwindow is for commit message, never forget about it!<br /><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/commit.png" width="750">||

== Add and Delete ==

Before commiting newly created files to repository, you should perform add operation:

`svn add <file1> <file2> ...`

Inverse operation is called svn delete

`svn delete <file1> <file2> ...`

||See on picture below how to perform this operations in Tortoise:<br /><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/add.png" width="750"><br /><img src="http://mipt-mips.googlecode.com/svn/wiki/images/tortoise-svn/delete.png" width="750">||