#summary MIPS registers

= Common information =

Register is a small amount of bits that CPU can access extremely quickly. Typical sizes of one registers are 8, 16, 32 and 64 bits. On RISC processors instruction usually performs only on registers, except loads and stores.

*User accessible registers* can be written or read by programmer using processor instructions. In some architectures, registers hold only one type of data: integer, floating point, vector, address etc.; in others, so-called *general purpose registers* can hold any or almost any type of data, usually integer and address. 

Some registers stores stack pointer, frame pointer, program counter etc.; they are called *special purpose registers*. Availability to change their value directly or only with special instruction depends on architecture.

*Constant registers* saves constant values, e.g. 0, 1, pi; programmer is not available to write to these registers, read-only access.

*Model-specific registers* saves information about processor itself: model, extensions. Sometimes there are special hardware register with temperature, voltage or random number.

= MIPS registers =

== User accessible registers ==

MIPS instruction uses 5 bits for register addressing, so there can be 2^5 = 32 registers. They are not equal.

|| *Number* || *Name* || *Use* || 
|| 0 || `$zero` || constant 0 ||
|| 1 || `$at` || assembler temporary ||
|| 2, 3 || `$v0, $v1` || _not used_ ||
|| 4 - 7 || `$a0 - $a3` || _not used_ ||
|| 8 - 15 || `$t0 - $t7` || temporaries ||
|| 15 - 23 || `$s0 - $s7` || _not used_ ||
|| 24, 25 || `$t8, $t9` || temporaries ||
|| 26, 27 || `$k0, $k1` || _not used_ ||
|| 28 || `$gp` || _not used_ ||
|| 29 || `$sp` || _not used_ ||
|| 30 || `$fp` || _not used_ ||
|| 31 || `$ra` || _not used_ ||

Registers marked as _not used_ are not used in our simulator now.
